'use client';

import React, { createContext, useContext, useEffect, useState, useMemo, useCallback, ReactNode, useRef } from 'react';
import { formatDistance } from 'date-fns';
import { 
  ActivityEvent, 
  TxReceiptEvent, 
  MarketCapEvent,
  WebSocketContextType,
  EventStats,
  SubscribeMessage,
  PingMessage,
  CustomWebSocket
} from '@/app/types/events';

// Create WebSocket context
const WebSocketContext = createContext<WebSocketContextType | null>(null);

// Maximum number of events to keep in each category
const MAX_EVENTS = 100;

// WebSocket URL
const WS_URL = 'wss://dev-feed.flayerlabs.xyz/ws';

// Connection timeout in milliseconds
const CONNECTION_TIMEOUT = 5000;

// Reconnection settings
const MAX_RECONNECT_ATTEMPTS = 5;

// Connection states
const CONNECTION_STATES: Record<number, string> = {
  [WebSocket.CONNECTING]: 'CONNECTING',
  [WebSocket.OPEN]: 'OPEN',
  [WebSocket.CLOSING]: 'CLOSING',
  [WebSocket.CLOSED]: 'CLOSED'
};

interface WebSocketProviderProps {
  children: ReactNode;
}

export function WebSocketProvider({ children }: WebSocketProviderProps) {
  // WebSocket connection state
  const [socket, setSocket] = useState<CustomWebSocket | null>(null);
  const [isConnected, setIsConnected] = useState<boolean>(false);
  const [connectionError, setConnectionError] = useState<string | null>(null);
  const [latency, setLatency] = useState<number | null>(null);
  const [lastPingTime, setLastPingTime] = useState<Date | null>(null);
  const reconnectAttemptsRef = useRef(0);
  const isConnectingRef = useRef(false);
  const reconnectTimerRef = useRef<NodeJS.Timeout | null>(null);

  // Event state
  const [activityEvents, setActivityEvents] = useState<ActivityEvent[]>([]);
  const [txReceiptEvents, setTxReceiptEvents] = useState<TxReceiptEvent[]>([]);
  const [marketCapEvents, setMarketCapEvents] = useState<MarketCapEvent[]>([]);
  
  // Statistics
  const [stats, setStats] = useState<EventStats>({
    totalEvents: 0,
    eventCounts: {
      POOL_CREATED: 0,
      POOL_SWAP: 0,
      USER_FEE_CLAIMED: 0,
      FAIR_LAUNCH_ENDED: 0,
      SCHEDULED: 0,
      MCAP_UPDATE: 0,
      TX_RECEIPT: 0,
    },
    eventRate: 0,
    recentTransactions: new Set(),
  });

  // Handle incoming messages
  const handleMessage = useCallback((event: MessageEvent) => {
    try {
      const data = JSON.parse(event.data);
      
      // Handle pong responses
      if (data.action === 'pong' && lastPingTime) {
        const currentTime = new Date();
        const latencyMs = currentTime.getTime() - lastPingTime.getTime();
        console.log('Pong received, latency:', latencyMs, 'ms');
        if (latencyMs > 0 && latencyMs < 3000) { // Only update if latency is reasonable
          setLatency(Math.round(latencyMs));
        } else {
          console.log('Ignoring abnormal latency value:', latencyMs);
        }
        return;
      }
      
      // Calculate new stats
      const now = Date.now();
      setStats(prevStats => {
        const newStats = { ...prevStats };
        newStats.totalEvents += 1;
        
        // Track unique transactions
        const txId = data.txHash || data.transactionId;
        if (txId) {
          // Only count new transactions
          if (!newStats.lastEventTime) {
            newStats.lastEventTime = now;
            newStats.recentTransactions = new Set([txId]);
            newStats.eventRate = 0;
          } else {
            const timeDiff = now - newStats.lastEventTime;
            if (timeDiff >= 1000) { // Update rate every second
              // Calculate transactions per second
              newStats.eventRate = newStats.recentTransactions.size / (timeDiff / 1000);
              newStats.lastEventTime = now;
              newStats.recentTransactions = new Set([txId]);
            } else {
              // Add to current transactions
              newStats.recentTransactions.add(txId);
              // Update rate even for sub-second intervals
              newStats.eventRate = newStats.recentTransactions.size / (timeDiff / 1000);
            }
          }
        }
        
        // Handle different event types
        if (data.type) {
          if (newStats.eventCounts[data.type as keyof typeof newStats.eventCounts] !== undefined) {
            newStats.eventCounts[data.type as keyof typeof newStats.eventCounts] += 1;
          }
          
          // Process activity events
          if (['POOL_CREATED', 'POOL_SWAP', 'USER_FEE_CLAIMED', 'FAIR_LAUNCH_ENDED', 'SCHEDULED'].includes(data.type)) {
            // Use the event's timestamp if available, otherwise use current time
            const eventWithTimestamp = {
              ...data,
              timestamp: data.timestamp || new Date().toISOString()
            };
            
            setActivityEvents(prev => [eventWithTimestamp as ActivityEvent, ...prev].slice(0, MAX_EVENTS));
          }
          // Process market cap events
          else if (data.type === 'MCAP_UPDATE') {
            newStats.eventCounts.MCAP_UPDATE += 1;
            
            // Use the event's timestamp if available, otherwise use current time
            const eventWithTimestamp = {
              ...data,
              timestamp: data.timestamp || new Date().toISOString()
            };
            
            setMarketCapEvents(prev => [eventWithTimestamp as MarketCapEvent, ...prev].slice(0, MAX_EVENTS));
          }
        }
        // Process transaction receipt events
        else if (data.txHash) {
          newStats.eventCounts.TX_RECEIPT += 1;
          const eventWithTimestamp = {
            ...data,
            timestamp: data.timestamp || new Date().toISOString()
          };
          setTxReceiptEvents(prev => [eventWithTimestamp as TxReceiptEvent, ...prev].slice(0, MAX_EVENTS));
        }
        
        return newStats;
      });
    } catch (error) {
      console.error('Error parsing message:', error);
    }
  }, [lastPingTime]);

  // Handle connection
  const connect = useCallback(() => {
    // Don't try to connect if already connecting or already connected
    if (isConnectingRef.current) {
      console.log('Connection already in progress, skipping connect call');
      return;
    }
    
    // Check if socket is already connected or connecting
    if (socket && (socket.readyState === WebSocket.OPEN || socket.readyState === WebSocket.CONNECTING)) {
      console.log('Socket already connected or connecting, no need to reconnect');
      return;
    }

    isConnectingRef.current = true;
    console.log('Attempting to connect to WebSocket...');
    
    try {
      const ws = new WebSocket(WS_URL) as CustomWebSocket;
      const connectionTimeout = setTimeout(() => {
        if (ws.readyState !== WebSocket.OPEN) {
          console.log('Connection timeout, closing socket');
          ws.close();
          setConnectionError('Connection timeout');
          isConnectingRef.current = false;
        }
      }, CONNECTION_TIMEOUT);

      ws.onopen = () => {
        clearTimeout(connectionTimeout);
        console.log('WebSocket connected');
        setSocket(ws);
        setIsConnected(true);
        setConnectionError(null);
        reconnectAttemptsRef.current = 0;
        isConnectingRef.current = false;

        // Subscribe to all channels
        const subscribeToActivity: SubscribeMessage = { action: 'subscribe', channel: 'activity' };
        const subscribeToTxReceipts: SubscribeMessage = { action: 'subscribe', channel: 'tx-receipts' };
        const subscribeToMarketCap: SubscribeMessage = { action: 'subscribe', channel: 'mcap-updates' };
        
        try {
          ws.send(JSON.stringify(subscribeToActivity));
          ws.send(JSON.stringify(subscribeToTxReceipts));
          ws.send(JSON.stringify(subscribeToMarketCap));
          console.log('Successfully subscribed to all channels');
          
          // Start ping interval after successful connection and subscription
          const pingInterval = setInterval(() => {
            if (ws.readyState === WebSocket.OPEN) {
              const timestamp = new Date().toISOString();
              const pingTime = new Date();
              setLastPingTime(pingTime);
              
              const pingMessage: PingMessage = { action: 'ping', timestamp };
              try {
                ws.send(JSON.stringify(pingMessage));
                console.log('Ping sent:', timestamp);
              } catch (error) {
                console.error('Error sending ping:', error);
              }
            } else if (ws.readyState === WebSocket.CLOSED || ws.readyState === WebSocket.CLOSING) {
              console.log('Clearing ping interval because socket is closed or closing');
              if (ws.pingInterval) {
                clearInterval(ws.pingInterval);
                ws.pingInterval = undefined;
              }
            }
          }, 5000);
          
          // Store the interval ID for cleanup
          ws.pingInterval = pingInterval;
        } catch (error) {
          console.error('Error sending subscription messages:', error);
          setConnectionError('Failed to subscribe to channels. Please try reconnecting.');
        }
      };
      
      ws.onclose = (event) => {
        console.log('WebSocket connection closed:', {
          code: event.code,
          reason: event.reason,
          wasClean: event.wasClean,
          state: CONNECTION_STATES[ws.readyState]
        });
        
        clearTimeout(connectionTimeout);
        if (ws.pingInterval) {
          clearInterval(ws.pingInterval);
          ws.pingInterval = undefined;
        }
        
        setIsConnected(false);
        isConnectingRef.current = false;
        
        // Clear any pending reconnection timer
        if (reconnectTimerRef.current) {
          clearTimeout(reconnectTimerRef.current);
          reconnectTimerRef.current = null;
        }
        
        // Only attempt to reconnect if the connection was closed unexpectedly
        // and we haven't already reached max reconnect attempts
        if (event.code !== 1000 && reconnectAttemptsRef.current < MAX_RECONNECT_ATTEMPTS) {
          reconnectAttemptsRef.current += 1;
          console.log(`Connection closed unexpectedly. Attempting to reconnect (${reconnectAttemptsRef.current}/${MAX_RECONNECT_ATTEMPTS})...`);
          
          // Use exponential backoff for reconnection attempts
          const backoffDelay = Math.min(1000 * Math.pow(2, reconnectAttemptsRef.current - 1), 30000);
          console.log(`Reconnecting in ${backoffDelay}ms`);
          
          reconnectTimerRef.current = setTimeout(() => {
            reconnectTimerRef.current = null;
            connect();
          }, backoffDelay);
        } else if (reconnectAttemptsRef.current >= MAX_RECONNECT_ATTEMPTS) {
          setConnectionError('Maximum reconnection attempts reached. Please refresh the page to try again.');
        }
      };
      
      ws.onerror = (error) => {
        console.error('WebSocket error:', error);
        clearTimeout(connectionTimeout);
        if (ws.pingInterval) {
          clearInterval(ws.pingInterval);
          ws.pingInterval = undefined;
        }
        
        const errorMessage = ws.readyState === WebSocket.CONNECTING 
          ? 'Failed to establish WebSocket connection. Please check if the server is running and accessible.'
          : 'WebSocket connection error. Please check your network connection and try again.';
        
        setConnectionError(errorMessage);
        setIsConnected(false);
        isConnectingRef.current = false;
      };
      
      ws.onmessage = handleMessage;
    } catch (error) {
      console.error('Error creating WebSocket:', error);
      setConnectionError('Failed to create WebSocket connection. Please check your browser settings and try again.');
      isConnectingRef.current = false;
    }
  }, [socket, handleMessage]);

  // Handle disconnection
  const disconnect = useCallback(() => {
    // Clear any reconnection timer
    if (reconnectTimerRef.current) {
      clearTimeout(reconnectTimerRef.current);
      reconnectTimerRef.current = null;
    }
    
    if (socket) {
      console.log('Disconnecting from WebSocket');
      if (socket.pingInterval) {
        clearInterval(socket.pingInterval);
        socket.pingInterval = undefined;
      }
      
      // Only close if it's not already closing or closed
      if (socket.readyState === WebSocket.OPEN || socket.readyState === WebSocket.CONNECTING) {
        socket.close();
      }
      
      setSocket(null);
      setIsConnected(false);
      isConnectingRef.current = false;
    }
  }, [socket]);

  // Add a manual reconnect function
  const manualReconnect = useCallback(() => {
    console.log('Manual reconnect requested');
    reconnectAttemptsRef.current = 0;
    disconnect();
    
    // Add a small delay before reconnecting
    setTimeout(connect, 1000);
  }, [connect, disconnect]);

  // Initialize WebSocket connection
  useEffect(() => {
    console.log('Initializing WebSocket connection');
    
    // Only connect if not already connected
    if (!isConnected && !isConnectingRef.current) {
      connect();
    }
    
    return () => {
      console.log('Cleaning up WebSocket connection on unmount');
      disconnect();
    };
  }, [connect, disconnect, isConnected]);

  // Format relative time
  const formatRelativeTime = useCallback((timestamp: string): string => {
    if (!timestamp) return 'N/A';
    
    try {
      // Parse the timestamp and adjust for local timezone
      const date = new Date(timestamp);
      const now = new Date();
      
      // If the date is invalid, return N/A
      if (isNaN(date.getTime())) {
        return 'N/A';
      }

      // Get the timezone offset in minutes
      const timezoneOffset = date.getTimezoneOffset();
      
      // Adjust the date for the timezone
      const localDate = new Date(date.getTime() - (timezoneOffset * 60000));
      
      // Format the full timestamp in local timezone
      const fullTimestamp = localDate.toLocaleString('en-GB', {
        year: 'numeric',
        month: '2-digit',
        day: '2-digit',
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit',
        hour12: false
      });
      
      // If the date is in the future, return "just now"
      if (localDate > now) {
        return `${fullTimestamp}\njust now`;
      }
      
      // For times less than a minute ago, show seconds
      const diffInSeconds = Math.floor((now.getTime() - localDate.getTime()) / 1000);
      if (diffInSeconds < 60) {
        return `${fullTimestamp}\n${diffInSeconds} seconds ago`;
      }
      
      // For times less than 2 minutes ago, show "1 minute ago"
      if (diffInSeconds < 120) {
        return `${fullTimestamp}\n1 minute ago`;
      }
      
      const relativeTime = formatDistance(localDate, now, { addSuffix: true });
      return `${fullTimestamp}\n${relativeTime}`;
    } catch {
      return 'N/A';
    }
  }, []);

  // Clear all events
  const clearEvents = useCallback(() => {
    setActivityEvents([]);
    setTxReceiptEvents([]);
    setMarketCapEvents([]);
    setStats({
      totalEvents: 0,
      eventCounts: {
        POOL_CREATED: 0,
        POOL_SWAP: 0,
        USER_FEE_CLAIMED: 0,
        FAIR_LAUNCH_ENDED: 0,
        SCHEDULED: 0,
        MCAP_UPDATE: 0,
        TX_RECEIPT: 0,
      },
      eventRate: 0,
      recentTransactions: new Set(),
    });
  }, []);

  // Context value
  const value = useMemo(() => ({
    isConnected,
    connectionError,
    latency: latency !== null ? `${latency}ms` : 'N/A',
    activityEvents,
    txReceiptEvents,
    marketCapEvents,
    stats,
    formatRelativeTime,
    connect,
    disconnect,
    clearEvents,
    manualReconnect,
  }), [
    isConnected, 
    connectionError, 
    latency, 
    activityEvents, 
    txReceiptEvents, 
    marketCapEvents, 
    stats, 
    formatRelativeTime,
    connect,
    disconnect,
    clearEvents,
    manualReconnect,
  ]);

  return (
    <WebSocketContext.Provider value={value}>
      {children}
    </WebSocketContext.Provider>
  );
}

// Custom hook to use the WebSocket context
export function useWebSocket(): WebSocketContextType {
  const context = useContext(WebSocketContext);
  if (!context) {
    throw new Error('useWebSocket must be used within a WebSocketProvider');
  }
  return context;
}